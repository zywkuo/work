1、创建版本库（windows系统不要起中文名）
	$ mkdir 文件名
	$ cd 文件夹
	$ pwd
	pwd命令用于显示当前目录。
2、把目录变成Git可以管理的仓库：
	$ git init
	Initialized empty Git repository in /Users/michael/learngit/.git/
3、把文件添加到仓库（可以同时添加多个）
	$ git add readme.txt
4、把文件提交到仓库
	$ git commit -m "xxx"
	-m后面输入的是本次提交的说明cd
5、修改之后查看结果，掌握仓库当前的状态告诉你有文件被修改过
	$ git status
6、查看具体修改了什么内容
	$ git diff 文件名称
7、历史记录看我们修改了几个版本
	$ git log
	$ git log --pretty=oneline（简化显示）
8、退回到上一个或多个版本（退回版本之前那些版本git log都看不到了）
	$ git reset --hard HEAD^（HEAD^一个、HEAD^^两个、HEAD~100、100个）
9、退回到指定版本(命令行窗口没有关闭情况向上找commit id)
	$ git reset --hard (commit id)
10、记录你的每一次命令找到commit id，回到哪个版本
	$ git reflog
11、查看文件内容
	$ cat 文件名称
12、让这个文件回到最近一次git commit或git add时的状态。
	$ git checkout -- 文件名称

13、回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
	$ git reset HEAD 文件名称

14、删除文件
	$ rm 文件名
	删错了把误删的文件恢复到最新版本$ git checkout -- 文件名
	确实要从版本库中删除该文件，那就用命令$ git rm 文件名，并且git commit：
15、本地仓库与github上仓库进行关联
	$ git remote add origin git@github.com:（github账户名）/（github要远程的仓库名）.git
16、把本地库的所有内容推送到远程库上
	$ git push -u origin master（第一次推送加上-u）
	$ git push origin master（以后推送写这个就行了）
17、从远程库克隆
	$ git clone git@github.com:（github账户名）/（github要远程的仓库名）.git
	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
18、创建分支（dev自己起的名字随意）
	$ git checkout -b dev（-b参数表示创建并切换，相当于以下两条命令）
19、查看当前分支
	$ git branch
20、从dev分支换到主分支（master系统默认主分支名字）
	$ git checkout master
21、把dev分支的工作成果合并到master分支上
	$ git merge dev
22、删除dev分支
	$ git branch -d dev
23、把当前工作现场“储藏”起来，等以后恢复现场后继续工作
	$ git stash
	开发一个新feature，最好新建一个分支；如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
24、查看远程库的信息
	$ git remote
	$ git remote -v（显示更详细的信息）
25、送分支，就是把该分支上的所有本地提交推送到远程库
	$ git push origin （主分支或分支名称）
26、查看本地master分支
	$ git branch
27、多人协作的工作模式通常是这样：
	a,可以试图用git push origin branch-name推送自己的修改；
	b,如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	c,如果合并有冲突，则解决冲突，并在本地提交；
	d,没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
	如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
